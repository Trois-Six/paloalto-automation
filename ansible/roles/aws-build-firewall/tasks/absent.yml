- name: Gather facts about all availabily zones
  amazon.aws.aws_az_info:
    region: "{{ aws_region }}"
  register: reg_aws_az_info

- name: Gather facts about VPC
  amazon.aws.ec2_vpc_net_info:
    region: "{{ aws_region }}"
    filters:
      "tag:Name": "{{ name_prefix }}-vpc"
      "tag:Environment": simple
  register: reg_vpc

- name: Gather facts about the firewall ec2
  community.aws.ec2_instance_info:
    region: "{{ aws_region }}"
    filters:
      availability-zone: "{{ reg_aws_az_info.availability_zones[0].zone_name }}"
      "tag:Name": "{{ name_prefix }}-fw"
      "tag:Environment": simple
      instance-state-name: [ "running"]
  register: reg_ec2_instance_fw

- name: Delete firewall ec2 instance
  community.aws.ec2_instance:
    region: "{{ aws_region }}"
    state: absent
    instance_ids: "{{ (reg_ec2_instance_fw.instances | first)['instance_id'] }}"
  when: reg_ec2_instance_fw.instances is defined and reg_ec2_instance_fw.instances | length > 0

- name: Delete IAM role policy for firewall bootstrap access
  community.aws.iam_policy:
    policy_name: "{{ name_prefix }}-fw-bootstrap"
    iam_name: "{{ name_prefix }}-fw-bootstrap"
    iam_type: role
    region: "{{ aws_region }}"
    state: absent
  ignore_errors: True

- name: Delete IAM role for firewall bootstrap access
  community.aws.iam_role:
    name: "{{ name_prefix }}-fw-bootstrap"
    path: /
    delete_instance_profile: True
    region: "{{ aws_region }}"
    state: absent
  ignore_errors: True

- name: Gather facts about all enis
  amazon.aws.ec2_eni_info:
    region: "{{ aws_region }}"
    filters:
      availability-zone: "{{ reg_aws_az_info.availability_zones[0].zone_name }}"
      vpc-id: "{{ reg_vpc.vpcs[0].id }}"
      "tag:Name": "{{ name_prefix }}-fw-*"
      "tag:Environment": simple
  register: reg_enis
  when: reg_vpc.vpcs is defined and reg_vpc.vpcs | length > 0

- name: Delete enis
  amazon.aws.ec2_eni:
    eni_id: "{{ item }}"
    region: "{{ aws_region }}"
    state: absent
  loop: "{{ reg_enis.network_interfaces | map(attribute='id') | list }}"
  when: reg_enis.network_interfaces is defined and reg_enis.network_interfaces | length > 0

- name: Delete eip addresses
  community.aws.ec2_eip:
    public_ip: "{{ item }}"
    in_vpc: True
    region: "{{ aws_region }}"
    state: absent
  loop: "{{ reg_enis.network_interfaces | selectattr('association.public_ip', 'defined') | map(attribute='association.public_ip') | list }}"
  when: reg_enis.network_interfaces is defined and reg_enis.network_interfaces | length > 0

- name: Gather facts about all security groups
  amazon.aws.ec2_group_info:
    region: "{{ aws_region }}"
    filters:
      vpc-id: "{{ reg_vpc.vpcs[0].id }}"
      "tag:Environment": simple
  register: reg_sgs
  when: reg_vpc.vpcs is defined and reg_vpc.vpcs | length > 0

- name: Delete sgs
  amazon.aws.ec2_group:
    group_id: "{{ item }}"
    region: "{{ aws_region }}"
    state: absent
  loop: "{{ reg_sgs.security_groups | map(attribute='group_id') | list }}"
  when: reg_sgs.security_groups is defined and reg_sgs.security_groups | length > 0
